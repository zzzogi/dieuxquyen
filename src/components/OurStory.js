import { useEffect, useRef, useState, useCallback } from "react";
import "./OurStory.css";

const storyItems = [
  {
    id: 1,
    title: "Ng√†y nh·∫≠p ng≈©",
    description: "Quy·ªÅn l√™n ƒë∆∞·ªùng ƒëi l√≠nh - Kh·ªüi ƒë·∫ßu h√†nh tr√¨nh m·ªõi",
    media: "/assets/images/story/img/1.jpg",
    type: "image",
  },
  {
    id: 2,
    title: "Giai ƒëo·∫°n kh√≥ khƒÉn",
    description: "V·∫•t v·∫£, b·ª° ng·ª° nh∆∞ng ki√™n c∆∞·ªùng v∆∞·ª£t qua",
    media: "/assets/images/story/img/2.jpg",
    type: "image",
  },
  {
    id: 3,
    title: "Ng√†y em ƒë·∫øn",
    description: "Di·ªáu Anh xu·∫•t hi·ªán nh∆∞ thi√™n th·∫ßn c·ª©u r·ªói",
    media: "/assets/images/story/img/3.jpg",
    type: "image",
  },
  {
    id: 4,
    title: "T√¨m hi·ªÉu",
    description: "Nh·ªØng ng√†y c√† ph√™, workdate ng·ªçt ng√†o",
    media: "/assets/images/story/vid/video.mp4",
    type: "video",
  },
  {
    id: 5,
    title: "L·ªùi t·ªè t√¨nh",
    description: "27/05/2025 - Ng√†y ƒë·ªãnh m·ªánh c·ªßa ƒë√¥i ta",
    media: "/assets/images/story/img/4.jpg",
    type: "image",
  },
  {
    id: 6,
    title: "Vi·∫øt ti·∫øp c√¢u chuy·ªán",
    description: "Ti·∫øp t·ª•c y√™u th∆∞∆°ng v√† t·∫°o th√™m k·ª∑ ni·ªám",
    media: "/assets/images/story/img/5.jpg",
    type: "image",
  },
];

export default function OurStory() {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isAutoPlay, setIsAutoPlay] = useState(true);
  const [isVideoPlaying, setIsVideoPlaying] = useState(false);
  const [isHoveringSlide, setIsHoveringSlide] = useState(false); // NEW
  const intervalRef = useRef(null);
  const videoRef = useRef(null);

  const totalItems = storyItems.length;
  const currentItem = storyItems[currentIndex];

  const handleNext = useCallback(() => {
    setCurrentIndex((prevIndex) => (prevIndex + 1) % totalItems);
    setIsVideoPlaying(false);
  }, [totalItems]);

  // Auto-rotate functionality v·ªõi logic cho video v√† hover
  useEffect(() => {
    // Clear existing interval
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
    }

    // Ch·ªâ start autoplay n·∫øu:
    // 1. AutoPlay enabled
    // 2. Video KH√îNG ƒëang ph√°t
    // 3. User KH√îNG hover v√†o slide
    if (isAutoPlay && !isVideoPlaying && !isHoveringSlide) {
      const delay = currentItem.type === "video" ? 8000 : 4000;

      intervalRef.current = setInterval(() => {
        handleNext();
      }, delay);
    }

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [
    isAutoPlay,
    currentIndex,
    isVideoPlaying,
    isHoveringSlide,
    currentItem.type,
    handleNext,
  ]);

  // Track video play/pause events
  useEffect(() => {
    const videoElement = videoRef.current;

    if (videoElement && currentItem.type === "video") {
      const handlePlay = () => {
        setIsVideoPlaying(true);
      };

      const handlePause = () => {
        setIsVideoPlaying(false);
      };

      const handleEnded = () => {
        setIsVideoPlaying(false);
        if (isAutoPlay && !isHoveringSlide) {
          setTimeout(() => {
            handleNext();
          }, 1000);
        }
      };

      videoElement.addEventListener("play", handlePlay);
      videoElement.addEventListener("pause", handlePause);
      videoElement.addEventListener("ended", handleEnded);

      return () => {
        videoElement.removeEventListener("play", handlePlay);
        videoElement.removeEventListener("pause", handlePause);
        videoElement.removeEventListener("ended", handleEnded);
      };
    }
  }, [currentIndex, currentItem.type, isAutoPlay, isHoveringSlide, handleNext]);

  const handlePrev = () => {
    setCurrentIndex((prevIndex) => (prevIndex - 1 + totalItems) % totalItems);
    setIsVideoPlaying(false);
  };

  const toggleAutoPlay = () => {
    setIsAutoPlay(!isAutoPlay);
  };

  const handleSlideClick = (index) => {
    const diff = index - currentIndex;
    if (diff === 1 || diff === -(totalItems - 1)) {
      handleNext();
    } else if (diff === -1 || diff === totalItems - 1) {
      handlePrev();
    }
  };

  // NEW: Handle hover on current slide
  const handleSlideMouseEnter = () => {
    setIsHoveringSlide(true);
  };

  const handleSlideMouseLeave = () => {
    setIsHoveringSlide(false);
  };

  const getItemStyle = (index) => {
    const diff = index - currentIndex;
    const verticalOffset = diff * 20;

    const isCurrent = diff === 0;
    const scale = isCurrent ? 1 : 0.75;
    const opacity = Math.abs(diff) <= 1 ? 1 : 0;

    return {
      transform: `translateY(${verticalOffset}%) scale(${scale})`,
      opacity: opacity,
      zIndex: isCurrent ? 10 : Math.abs(diff) === 1 ? 5 : 1,
      pointerEvents: Math.abs(diff) <= 1 ? "auto" : "none",
    };
  };

  return (
    <section className="story-vertical-section">
      {/* Background Decorations */}
      <div className="story-bg-decorations">
        <span className="float-element heart-1">üíï</span>
        <span className="float-element heart-2">üíñ</span>
        <span className="float-element heart-3">üíó</span>
        <span className="float-element star-1">‚≠ê</span>
        <span className="float-element star-2">‚ú®</span>
        <span className="float-element star-3">üåü</span>
        <div className="bg-circle circle-1"></div>
        <div className="bg-circle circle-2"></div>
      </div>

      <div className="story-container-centered">
        <h2 className="story-title">C√¢u chuy·ªán c·ªßa ch√∫ng m√¨nh</h2>

        {/* Status Indicators */}
        {currentItem.type === "video" && isVideoPlaying && (
          <div className="video-playing-indicator">
            üé¨ Video ƒëang ph√°t - Carousel t·∫°m d·ª´ng
          </div>
        )}

        {isHoveringSlide && !isVideoPlaying && (
          <div className="hover-pause-indicator">
            üñºÔ∏è Carousel t·∫°m d·ª´ng - Ng·∫Øm ·∫£nh th√¥i n√†o!
          </div>
        )}

        {/* Carousel Container */}
        <div className="vertical-carousel-wrapper">
          {/* Up Arrow */}
          <button
            className="arrow-btn up-arrow"
            onClick={handlePrev}
            aria-label="Previous"
          >
            <svg width="32" height="32" viewBox="0 0 24 24" fill="none">
              <path
                d="M18 15L12 9L6 15"
                stroke="currentColor"
                strokeWidth="3"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
          </button>

          <div className="vertical-carousel">
            <div className="carousel-vertical-track">
              {storyItems.map((item, index) => (
                <div
                  key={item.id}
                  className={`carousel-slide ${
                    index === currentIndex ? "current" : ""
                  } ${
                    index === currentIndex && isHoveringSlide ? "hovering" : ""
                  }`}
                  style={getItemStyle(index)}
                  onClick={() => handleSlideClick(index)}
                  onMouseEnter={
                    index === currentIndex ? handleSlideMouseEnter : undefined
                  }
                  onMouseLeave={
                    index === currentIndex ? handleSlideMouseLeave : undefined
                  }
                >
                  <div className="slide-content">
                    {item.type === "image" ? (
                      <>
                        <img
                          src={item.media}
                          alt={item.title}
                          className="slide-media"
                        />
                        <div className="slide-placeholder">
                          <span className="placeholder-icon">üì∑</span>
                        </div>
                      </>
                    ) : (
                      <div className="video-wrapper">
                        <video
                          ref={index === currentIndex ? videoRef : null}
                          src={item.media}
                          className="slide-media"
                          controls={index === currentIndex}
                          muted
                          loop
                          autoPlay={index === currentIndex}
                        />
                        {index === currentIndex && !isVideoPlaying && (
                          <div className="video-play-hint">
                            <div className="play-icon-hint">‚ñ∂Ô∏è</div>
                            <p>Click ƒë·ªÉ ph√°t video</p>
                          </div>
                        )}
                      </div>
                    )}

                    {/* Description Overlay - Fades out on hover */}
                    <div className="slide-description">
                      <h3>{item.title}</h3>
                      <p>{item.description}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Down Arrow */}
          <button
            className="arrow-btn down-arrow"
            onClick={handleNext}
            aria-label="Next"
          >
            <svg width="32" height="32" viewBox="0 0 24 24" fill="none">
              <path
                d="M6 9L12 15L18 9"
                stroke="currentColor"
                strokeWidth="3"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
          </button>
        </div>

        {/* Controls */}
        <div className="carousel-controls">
          <button className="autoplay-btn" onClick={toggleAutoPlay}>
            {isAutoPlay ? (
              <>
                <svg
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="currentColor"
                >
                  <rect x="6" y="4" width="4" height="16" />
                  <rect x="14" y="4" width="4" height="16" />
                </svg>
                <span>T·∫°m d·ª´ng</span>
              </>
            ) : (
              <>
                <svg
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="currentColor"
                >
                  <path d="M8 5v14l11-7z" />
                </svg>
                <span>T·ª± ƒë·ªông</span>
              </>
            )}
          </button>

          <div className="progress-dots">
            {storyItems.map((_, index) => (
              <button
                key={index}
                className={`dot ${index === currentIndex ? "active" : ""}`}
                onClick={() => setCurrentIndex(index)}
                aria-label={`Chuy·ªÉn t·ªõi ${index + 1}`}
              />
            ))}
          </div>
        </div>
      </div>
    </section>
  );
}
